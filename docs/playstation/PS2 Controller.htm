<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html >
<head>
<script>function a(c){this.t={};this.tick=function(c,e,b){b=void 0!=b?b:(new Date).getTime();this.t[c]=[b,e]};this.tick("start",null,c)}var d=new a;window.jstiming={Timer:a,load:d};try{var f=null;window.chrome&&window.chrome.csi&&(f=Math.floor(window.chrome.csi().pageT));null==f&&window.gtbExternal&&(f=window.gtbExternal.pageT());null==f&&window.external&&(f=window.external.pageT);f&&(window.jstiming.pt=f)}catch(g){};
</script>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<base target="_top">
<title>Playstation 2 (Dual Shock) co...</title>
<style type="text/css">
/* default css */
table {
font-size: 1em;
line-height: inherit;
border-collapse: collapse;
}
tr {
text-align: left;
}
div, address, ol, ul, li, option, select {
margin-top: 0px;
margin-bottom: 0px;
}
p {
margin: 0px;
}
pre {
font-family: Courier New;
white-space: pre-wrap;
margin:0;
}
body {
margin: 6px;
padding: 0px;
font-family: Verdana, sans-serif;
font-size: 10pt;
background-color: #ffffff;
color: #000;
}
img {
-moz-force-broken-image-icon: 1;
}
@media screen {
html.pageview {
background-color: #f3f3f3 !important;
overflow-x: hidden;
overflow-y: scroll;
}
body {
min-height: 1100px;
counter-reset: __goog_page__;
}
* html body {
height: 1100px;
}
/* Prevent repaint errors when scrolling in Safari. This "Star-7" css hack
targets Safari 3.1, but not WebKit nightlies and presumably Safari 4.
That's OK because this bug is fixed in WebKit nightlies/Safari 4 :-). */
html*#wys_frame::before {
content: '\A0';
position: fixed;
overflow: hidden;
width: 0;
height: 0;
top: 0;
left: 0;
}
.pageview body {
border-top: 1px solid #ccc;
border-left: 1px solid #ccc;
border-right: 2px solid #bbb;
border-bottom: 2px solid #bbb;
width: 648px !important;
margin: 15px auto 25px;
padding: 40px 50px;
}
/* IE6 */
* html {
overflow-y: scroll;
}
* html.pageview body {
overflow-x: auto;
}
.writely-callout-data {
display: inline-block;
width: 1px;
height: 1px;
overflow: hidden;
margin-left: -1px;
}
.writely-footnote-marker {
background-image: url('images/footnote_doc_icon.gif');
background-color: transparent;
background-repeat: no-repeat;
width: 7px;
overflow: hidden;
height: 16px;
vertical-align: top;
-moz-user-select: none;
}
.editor .writely-footnote-marker {
cursor: move;
}
.writely-footnote-marker-highlight {
background-position: -15px 0;
-moz-user-select: text;
}
.writely-footnote-hide-selection ::-moz-selection, .writely-footnote-hide-selection::-moz-selection {
background: transparent;
}
.writely-footnote-hide-selection ::selection, .writely-footnote-hide-selection::selection {
background: transparent;
}
.writely-footnote-hide-selection {
cursor: move;
}
/* Comments */
.writely-comment-yellow {
background-color: #ffffd7;
}
.writely-comment-orange {
background-color: #ffe3c0;
}
.writely-comment-pink {
background-color: #ffd7ff;
}
.writely-comment-green {
background-color: #d7ffd7;
}
.writely-comment-blue {
background-color: #d7ffff;
}
.writely-comment-purple {
background-color: #eed7ff;
}
.br_fix span+br:not(:-moz-last-node) {
position:relative;
left: -1ex
}
#cb-p-tgt {
font-size: 8pt;
padding: .4em;
background-color: #ddd;
color: #333;
}
#cb-p-tgt-can {
text-decoration: underline;
color: #36c;
font-weight: bold;
margin-left: 2em;
}
#cb-p-tgt .spin {
width: 16px;
height: 16px;
background: url(//ssl.gstatic.com/docs/clipboard/spin_16o.gif) no-repeat;
}
}
h6 { font-size: 8pt }
h5 { font-size: 8pt }
h4 { font-size: 10pt }
h3 { font-size: 12pt }
h2 { font-size: 14pt }
h1 { font-size: 18pt }
blockquote {padding: 10px; border: 1px #DDD dashed }
.webkit-indent-blockquote { border: none; }
a img {border: 0}
.pb {
border-width: 0;
page-break-after: always;
/* We don't want this to be resizeable, so enforce a width and height
using !important */
height: 1px !important;
width: 100% !important;
}
.editor .pb {
border-top: 1px dashed #C0C0C0;
border-bottom: 1px dashed #C0C0C0;
}
div.google_header, div.google_footer {
position: relative;
margin-top: 1em;
margin-bottom: 1em;
}
/* Table of contents */
.editor div.writely-toc {
background-color: #f3f3f3;
border: 1px solid #ccc;
}
.writely-toc > ol {
padding-left: 3em;
font-weight: bold;
}
ol.writely-toc-subheading {
padding-left: 1em;
font-weight: normal;
}
/* IE6 only */
* html writely-toc ol {
list-style-position: inside;
}
.writely-toc-none {
list-style-type: none;
}
.writely-toc-decimal {
list-style-type: decimal;
}
.writely-toc-upper-alpha {
list-style-type: upper-alpha;
}
.writely-toc-lower-alpha {
list-style-type: lower-alpha;
}
.writely-toc-upper-roman {
list-style-type: upper-roman;
}
.writely-toc-lower-roman {
list-style-type: lower-roman;
}
.writely-toc-disc {
list-style-type: disc;
}
/* Ordered lists converted to numbered lists can preserve ordered types, and
vice versa. This is confusing, so disallow it */
ul[type="i"], ul[type="I"], ul[type="1"], ul[type="a"], ul[type="A"] {
list-style-type: disc;
}
ol[type="disc"], ol[type="circle"], ol[type="square"] {
list-style-type: decimal;
}
/* end default css */
/* custom css */
/* end custom css */
/* ui edited css */
body {
font-family: Verdana;
font-size: 10.0pt;
line-height: normal;
background-color: #ffffff;
}
/* end ui edited css */
/* editor CSS */
.editor a:visited {color: #551A8B}
.editor table.zeroBorder {border: 1px dotted gray}
.editor table.zeroBorder td {border: 1px dotted gray}
.editor table.zeroBorder th {border: 1px dotted gray}
.editor div.google_header, .editor div.google_footer {
border: 2px #DDDDDD dashed;
position: static;
width: 100%;
min-height: 2em;
}
.editor .misspell {background-color: yellow}
.editor .writely-comment {
font-size: 9pt;
line-height: 1.4;
padding: 1px;
border: 1px dashed #C0C0C0
}
/* end editor CSS */
</style>
<style>
body {
margin: 0px;
}
#doc-contents {
margin: 6px;
}
#google-view-footer {
clear: both;
border-top: thin solid;
padding-top: 0.3em;
padding-bottom: 0.3em;
}
a.google-small-link:link, a.google-small-link:visited {
color:#112ABB;
font-family:Arial,Sans-serif;
font-size:11px !important;
}
body, p, div, td {
direction: inherit;
}
@media print {
#google-view-footer {
display: none;
}
}
</style>
<script>
function viewOnLoad() {
if (document.location.href.indexOf('spi=1') != -1) {
if (navigator.userAgent.toLowerCase().indexOf('msie') != -1) {
window.print();
} else {
window.setTimeout(window.print, 10);
}
}
if (document.location.href.indexOf('hgd=1') != -1) {
var footer = document.getElementById("google-view-footer");
if (footer) {
footer.style.display = 'none';
}
}
}
</script>
</head>
<body onload="window.jstiming.load.tick('ol'); window.jstiming.report(window.jstiming.load, null, document.location.protocol == 'https:' ? 'https://gg.google.com/csi' : null);">
<div id="doc-contents">
<font class="Apple-style-span" face="Courier New">Playstation 2 (Dual Shock) controller protocol notes<br>====================================================<br><br>There are many sources for information on the basics of the<br>Playstation controller protocol. There is frustratingly little,<br>however, in the way of comprehensive documentation for the<br>controller&#39;s full command set.<br><br>This document is a rather loose collection of reverse-engineering<br>notes, documenting a larger subset of the PS2 and Dual Shock<br>protocols than I&#39;ve seen elsewhere. The reader should already be<br>familiar with the basics of the Playstation controller protocol.<br><br>This document has three primary sources:<br><br>&nbsp; - Publicly available documents such as Playstation.txt<br><br>&nbsp; - Traces from a homebrew PS2 controller/memory port sniffer<br><br>&nbsp; - Interactively experimenting with a controller connected<br>&nbsp;&nbsp;&nbsp; to both the above port sniffer and an arbitrary packet<br>&nbsp;&nbsp;&nbsp; generator.<br><br>Since the Playstation always transmits and receives simultaneously,<br>this document uses TX/RX notation, where &quot;TX&quot; is the hexidecimal<br>command byte being transmitted to the controller and &quot;RX&quot; is the<br>hexadecimal response byte. A &quot;|&quot; character is often used to separate<br>the header from a command&#39;s payload, but it has no electrical<br>significance.<br><br>--Micah Dowty &lt;micah@navi.cx&gt;<br><br>---------------------<br>General packet format<br>---------------------<br><br>&nbsp;&nbsp; 01/&nbsp;&nbsp;&nbsp;&nbsp; High nybble is device type, low nybble is port number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ff&nbsp;&nbsp; N/A (Always FF)<br><br>&nbsp;&nbsp; 42/&nbsp;&nbsp;&nbsp;&nbsp; Command byte<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 41&nbsp;&nbsp; High nybble is device mode/status, low nybble is the<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; number of 16-bit words of command-specific data.<br><br>&nbsp;&nbsp; 00/&nbsp;&nbsp;&nbsp;&nbsp; N/A (Always 0)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5a&nbsp;&nbsp; N/A (Always 5a. End-of-header?)<br><br>&nbsp;&nbsp; .. command-specific data ..<br>&nbsp;&nbsp; (Last byte is not ACK&#39;ed)<br><br>The byte 0x5A seems to be used as padding in several situations.<br>Besides end-of-header, it seems to be sent by the PS2 when the<br>controller (via the low nybble of the second response byte) indicates<br>it has more data to reply with, but the PS2 has no more parameter<br>data to send.<br><br>Device modes:<br>&nbsp; 0x4: Digital<br>&nbsp; 0x7: Dual shock<br>&nbsp; 0xF: Escape<br><br>Note that the command byte and the mode/length byte are transferred<br>simultaneously. This means that the length of the reply cannot directly<br>depend on the command you just sent! This is probably the reason why<br>all escape-mode commands are the same length: the reply length can be<br>calculated using only the current mode, without any need to know which<br>command is being replied to.<br><br>This means that the data dependencies between the command and the reply<br>are quite small. The controller needs to process the command byte by the<br>time the first command-specific reply byte is sent, and it needs to<br>validate each byte in the header just enough to know whether that byte<br>gets to be ACK&#39;ed. There are no sub-byte data dependencies, and there is<br>an entire byte of slack between the command and the command-specific<br>data.<br><br><br>-----------------<br>Packet reference:<br>-----------------<br><br>0x40 Initialize pressure sensor<br>===============================<br><br>* Only ACK&#39;ed when the controller is in escape mode (0xF)<br><br>01/ff 40/f3 00/5a | 00/00 02/00 00/02 00/00 00/00 00/5a <br><br>This command sets up parameters for a single pressure-sensitive<br>button. Note that it is not required in order to use pressure<br>sensitive buttons, and that this command by itself will not<br>enable them. You still need to use command 0x4f to add them<br>to the controller&#39;s results packet.<br><br>Command data:<br>&nbsp; 0. Button number (0x00 - 0x0b, in the same order that<br>&nbsp;&nbsp;&nbsp;&nbsp; the buttons are listed in the response packet)<br>&nbsp; 1. 0x02 (?)<br>&nbsp; 2. 0x00 (?)<br>&nbsp; 3. 0x00 (?)<br>&nbsp; 4. 0x00 (?)<br>&nbsp; 5. 0x00 (?)<br><br>Response data:<br>&nbsp; 0. 0x00 (?)<br>&nbsp; 1. 0x00 (?)<br>&nbsp; 2. 0x02 (?)<br>&nbsp; 3. 0x00 (?)<br>&nbsp; 4. 0x00 (?)<br>&nbsp; 5. 0x5a (Padding?)<br><br><br>0x41 Get available polling results<br>==================================<br><br>* Only ACK&#39;ed when the controller is in escape mode (0xF)<br><br>01/ff 41/f3 00/5a | 5a/ff 5a/ff 5a/03 5a/00 5a/00 5a/5a<br><br>Command data:<br>&nbsp; - None (Padded with 0x5a)<br><br>Response data:<br>&nbsp; - In digital mode, returns all zeroes<br>&nbsp; - In analog mode:<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0-4. Bitfield of available polling results.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (This bitfield can be given verbatim to<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; command 0x4f to enable all polling results)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5. Always 0x5a (padding)<br><br><br>0x42 Controller poll (Read buttons/axes, write actuators)<br>=========================================================<br><br>* Valid in escape (0xf) and non-escape modes<br><br>01/ff 42/41 00/5a | 00/ff 00/ff<br><br>Side effects:<br>&nbsp; Exits escape mode<br><br>Command data:<br>&nbsp; 6 bytes of Actuator data (DualShock mode only)<br>&nbsp; See Command 0x4d for details on actuator data.<br><br>Response data:<br>&nbsp; The length of the response varies, depending on<br>&nbsp; the controller mode. The following data bytes are<br>&nbsp; available. The actual set of data sent during each<br>&nbsp; poll is controlled by Command 0x4f.<br><br>&nbsp; Digital mode:<br>&nbsp;&nbsp;&nbsp;&nbsp; 0. buttons (1)<br>&nbsp;&nbsp;&nbsp;&nbsp; 1. buttons (2)<br><br>&nbsp; DualShock mode: (enabled by default)<br>&nbsp;&nbsp;&nbsp;&nbsp; 2. right_analog_x<br>&nbsp;&nbsp;&nbsp;&nbsp; 3. right_analog_y<br>&nbsp;&nbsp;&nbsp;&nbsp; 4. left_analog_x<br>&nbsp;&nbsp;&nbsp;&nbsp; 5. left_analog_y<br><br>&nbsp; DualShock mode: (disabled by default)<br>&nbsp;&nbsp;&nbsp;&nbsp; 6. right_pressure <br>&nbsp;&nbsp;&nbsp;&nbsp; 7. left_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 8. up_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 9. down_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 10. triangle_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 11. circle_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 12. cross_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 13. square_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 14. l1_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 15. r1_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 16. l2_pressure<br>&nbsp;&nbsp;&nbsp;&nbsp; 17. r2_pressure<br><br><br>0x43 Controller Read and Escape<br>===============================<br><br>* Valid in escape (0xf) and non-escape modes<br><br>01/ff 43/41 00/5a | 01/ff 00/ff <br><br>Command data:<br>&nbsp; 0. 00 to exit escape mode, 01 to enter escape mode<br>&nbsp; 1. Always zero?<br><br>Response data:<br>&nbsp; (Same as comand 0x42)<br><br>Hypothesis:<br>&nbsp; <br>&nbsp; Command 0x43 is a controller read, like command 0x42, but the first<br>PSX-&gt;controller byte indicates whether to put the controller into an<br>escape mode. In escape mode, the controller&#39;s mode is reported as 0xF<br>and several additional commands are available.<br><br><br>0x44 Set major mode (DualShock/Digital)<br>=======================================<br><br>* Only ACK&#39;ed when the controller is in escape mode (0xF)<br><br>01/ff 44/f3 00/5a | 01/00 03/00 00/00 00/00 00/00 00/00 <br><br>Side effects:<br>&nbsp; - Disables pressure-sensitive buttons.<br>&nbsp; - When DualShock mode is enabled, the Analog light goes on.<br>&nbsp; - When DualShock mode is disabled, the Analog light goes off.<br><br>&nbsp; WARNING: There is a watchdog timer on DualShock mode.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If the controller doesn&#39;t see the PSX polling<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Command 0x42) for a few seconds, it switches <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; back to Digital mode.<br><br>Command data:<br>&nbsp; 0. 0x01 to set DualShock mode, 0x00 to set Digital mode &nbsp;<br>&nbsp; 1. 0x03 (?)<br>&nbsp; 2. 0x00 (?)<br>&nbsp; 3. 0x00 (?)<br>&nbsp; 4. 0x00 (?)<br>&nbsp; 5. 0x00 (?)<br><br>Response data:<br>&nbsp; Always zero?<br><br><br>0x45 Read extended status 1<br>===========================<br><br>* Only ACK&#39;ed when the controller is in escape mode (0xF)<br><br>01/ff 45/f3 00/5a | 5a/03 5a/02 5a/01 5a/02 5a/01 5a/00<br><br>Command data:<br>&nbsp; - None (Padded with 0x5a)<br><br>Response data:<br>&nbsp; - 0x03 (?) on Dual Shock controller, 0x01 (?) for Guitar Hero controller <br>&nbsp; - 0x02 (?)<br>&nbsp; - 0x01 if the &quot;Analog&quot; light is on, 0x00 if it&#39;s off.<br>&nbsp; - 0x02 (?)<br>&nbsp; - 0x01 (?)<br>&nbsp; - 0x00 (?)<br><br><br>0x46 Read constant 1<br>====================<br><br>* Only ACK&#39;ed when the controller is in escape mode (0xF)<br><br>01/ff 46/f3 00/5a | 00/00 5a/00 5a/01 5a/02 5a/00 5a/0a<br>01/ff 46/f3 00/5a | 01/00 5a/00 5a/01 5a/01 5a/01 5a/14 <br><br>Command data:<br>&nbsp; 0. Offset (0 or 1)<br>&nbsp; (Padded with 0x5A)<br><br>This command reads some unknown identifier or status block.<br>The block is 10 bytes long, and has a constant value on<br>every controller and operating mode I&#39;ve tested:<br><br>&nbsp; 00 01 02 00 0a<br>&nbsp; 00 01 01 01 14<br><br><br>0x47 Read constant 2<br>====================<br><br>* Only ACK&#39;ed when the controller is in escape mode (0xF)<br><br>01/ff 47/f3 00/5a | 00/00 5a/00 5a/02 5a/00 5a/01 5a/00 <br><br>Command data:<br>&nbsp; 0. Offset? (always 0)<br>&nbsp; (Padded with 0x5A)<br><br>This command reads some unknown identifier or status block.<br>The block is 5 bytes long, and has a constant value on<br>every controller and operating mode I&#39;ve tested:<br><br>&nbsp; 00 02 00 01 00<br><br><br>0x4c Read constant 3<br>====================<br><br>* Only ACK&#39;ed when the controller is in escape mode (0xF)<br><br>01/ff 4c/f3 00/5a | 00/00 5a/00 5a/00 5a/04 5a/00 5a/00<br>01/ff 4c/f3 00/5a | 01/00 5a/00 5a/00 5a/07 5a/00 5a/00<br><br>Command data:<br>&nbsp; 0. Offset (0 or 1)<br>&nbsp; (Padded with 0x5A)<br><br>This command reads some unknown identifier or status block.<br>The block is 10 bytes long, and has a constant value on<br>every controller and operating mode I&#39;ve tested:<br><br>&nbsp; 00 00 04 00 00<br>&nbsp; 00 00 07 00 10<br><br><br>0x4d Specify polling command format<br>===================================<br><br>* Only ACK&#39;ed when the controller is in escape mode (0xF)<br><br>01/ff 4d/f3 00/5a | 00/00 01/01 ff/ff ff/ff ff/ff ff/ff<br><br>This command sets up a mapping between bytes in each<br>controller poll (Command 0x42) and the controller&#39;s actuator<br>channels. Each data byte in this command dictates the meaning<br>of the corresponding data byte in command 0x42.<br><br>For the Dual Shock controller, this command can specify<br>the following actuator channels:<br><br>&nbsp; 00: Small vibration motor, with no speed control.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If this channel is set to 0xFF, the small motor<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; turns on. Any other value turns it off.<br><br>&nbsp; 01: Larger vibration motor, with 8-bit variable speed.<br><br>&nbsp; ff: Disabled<br><br>The example packet above is typical for a Dual Shock<br>controller.<br><br>This command&#39;s response packet is the previous actuator<br>mapping. By default all channels are disabled, so when<br>this command is run immediately after switching into<br>DualShock mode it will return all 0xFF.<br><br><br>0x4f Specify polling result format<br>==================================<br><br>* Only ACK&#39;ed when the controller is in escape mode (0xF)<br><br>01/ff 4f/f3 00/5a | ff/00 ff/00 03/00 00/00 00/00 00/5a <br><br>Command data:<br>&nbsp; Bitfield indicating which bytes in the response packet<br>&nbsp; should be included. This lets the host instruct the<br>&nbsp; controller to include more or less data than it would<br>&nbsp; by default. This command is used to enable pressure-<br>&nbsp; sensitive buttons, and it can be used to disable any of<br>&nbsp; the default response bytes.<br><br>Response data:<br>&nbsp; 0. Always 0x00<br>&nbsp; 1. Always 0x00<br>&nbsp; 2. Always 0x00<br>&nbsp; 3. Always 0x00<br>&nbsp; 4. Always 0x00<br>&nbsp; 5. Always 0x5a<br><br>--</font><br>
<br clear="all"/>
</div>
<div id="google-view-footer">
<div id="maybecanedit" style="float:right">
<a class="google-small-link"
           id="editpermissionlink"
           
             href="Doc?tab=edit&dr=true&id=ddbmmwds_5cw4pk3"
           
           title="Edit this page">
Edit this page (if you have permission)</a>
<span style="color:#676767;">|</span>
<a class="google-small-link" id="report-abuse-link"
         href="abuse?id=0ARtjTX4zayaTZGRibW13ZHNfNWN3NHBrMw">
Report abuse</a>
</div>
<div style="float:left">
<a title="Learn more about Google Docs"
            class="google-small-link"
            href="/">
Google Docs -- Web word processing, presentations and spreadsheets.</a>
</div>
<p> &nbsp;
</div>
<script><!--
    viewOnLoad();
    if(window.jstiming){window.jstiming.a={};window.jstiming.b=1;var k=function(c,b,e){var a=c.t[b],f=c.t.start;if(a&&(f||e))return a=c.t[b][0],void 0!=e?f=e:f=f[0],a-f},m=function(c,b,e){var a="";window.jstiming.pt&&(a+="&srt="+window.jstiming.pt,delete window.jstiming.pt);try{window.external&&window.external.tran?a+="&tran="+window.external.tran:window.gtbExternal&&window.gtbExternal.tran?a+="&tran="+window.gtbExternal.tran():window.chrome&&window.chrome.csi&&(a+="&tran="+window.chrome.csi().tran)}catch(f){}var d=
window.chrome;if(d&&(d=d.loadTimes))d().wasFetchedViaSpdy&&(a+="&p=s"),d().wasNpnNegotiated&&(a+="&npn=1"),d().wasAlternateProtocolAvailable&&(a+="&apa=1");var h=c.t,n=h.start,d=[],i=[],g;for(g in h)if("start"!=g&&0!=g.indexOf("_")){var j=h[g][1];j?h[j]&&i.push(g+"."+k(c,g,h[j][0])):n&&d.push(g+"."+k(c,g))}delete h.start;if(b)for(var l in b)a+="&"+l+"="+b[l];(b=e)||(b="https:"==document.location.protocol?"https://csi.gstatic.com/csi":"http://csi.gstatic.com/csi");return[b,"?v=3","&s="+(window.jstiming.sn||
"writely")+"&action=",c.name,i.length?"&it="+i.join(","):"","",a,"&rt=",d.join(",")].join("")},o=function(c,b,e){c=m(c,b,e);if(!c)return"";var b=new Image,a=window.jstiming.b++;window.jstiming.a[a]=b;b.onload=b.onerror=function(){window.jstiming&&delete window.jstiming.a[a]};b.src=c;b=null;return c};window.jstiming.report=function(c,b,e){if("prerender"==document.webkitVisibilityState){var a=!1,f=function(){if(!a){b?b.prerender="1":b={prerender:"1"};var d;"prerender"==document.webkitVisibilityState?
d=!1:(o(c,b,e),d=!0);d&&(a=!0,document.removeEventListener("webkitvisibilitychange",f,!1))}};document.addEventListener("webkitvisibilitychange",f,!1);return""}return o(c,b,e)}};

    window.jstiming.load.name = 'published';
    
    
    var urchinPage = "/View";

    
    function getXHR() {
      if (typeof XMLHttpRequest != "undefined") {
        return new XMLHttpRequest();
      }
      try { return new ActiveXObject("Msxml2.XMLHTTP.6.0") } catch(e) {}
      try { return new ActiveXObject("Msxml2.XMLHTTP.3.0") } catch(e) {}
      try { return new ActiveXObject("Msxml2.XMLHTTP") } catch(e) {}
      try { return new ActiveXObject("Microsoft.XMLHTTP") } catch(e) {}
      return null;
    }
  --></script>
</body>
</html>
